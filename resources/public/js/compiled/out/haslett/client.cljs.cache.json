["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$go-loop","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$haslett.client","~:imports",null,"~:requires",["^ ","~$a","~$cljs.core.async","^;","^;","~$fmt","~$haslett.format","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^;","~$>!","^;"],"~:defs",["^ ","~$close",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","file:/home/julia/.m2/repository/haslett/haslett/0.1.6/haslett-0.1.6.jar!/haslett/client.cljs","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^L",[["~$stream"]]]]],"~:doc","Close a stream opened by connect."],"^7","~$haslett.client/close","^F","file:/home/julia/.m2/repository/haslett/haslett/0.1.6/haslett-0.1.6.jar!/haslett/client.cljs","^J",12,"~:method-params",["^L",[["^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^H",1,"~:variadic?",false,"^G",7,"~:ret-tag","~$any","^I",7,"~:max-fixed-arity",1,"~:fn-var",true,"^K",["^L",["^M",["^L",[["^N"]]]]],"^O","Close a stream opened by connect."],"~$connect",["^ ","^D",null,"^E",["^ ","^F","file:/home/julia/.m2/repository/haslett/haslett/0.1.6/haslett-0.1.6.jar!/haslett/client.cljs","^G",13,"^H",7,"^I",13,"^J",14,"^K",["^L",["^M",["^L",[["~$url"],["^Z","~$options"]]]]],"^O","Create a WebSocket to the specified URL, and returns a 'stream' map of four\n  keys:\n\n    :socket       - contains the WebSocket object\n    :close-status - a promise channel that contains the final close status\n    :source       - a core.async channel to read from\n    :sink         - a core.async channel to write to\n\n  Takes the following options:\n\n    :format      - a formatter from haslett.format\n    :source      - a custom channel to use as the source\n    :sink        - a custom channel to use as the sink\n    :protocols   - passed to the WebSocket, a vector of protocol strings\n    :binary-type - passed to the WebSocket, may be :blob or :arraybuffer\n    :close-chan? - true if channels should be closed if WebSocket is closed\n                   (defaults to true)\n\n  The WebSocket may either be closed directly, or by closing the\n  stream's :sink channel.","~:top-fn",["^ ","^T",false,"~:fixed-arity",2,"^W",2,"^Q",[["^Z"],["^Z","^["]],"^K",["^L",[["^Z"],["^Z","^["]]],"^S",["^L",[null,null]]]],"^7","~$haslett.client/connect","^F","file:/home/julia/.m2/repository/haslett/haslett/0.1.6/haslett-0.1.6.jar!/haslett/client.cljs","^J",14,"^10",["^ ","^T",false,"^11",2,"^W",2,"^Q",[["^Z"],["^Z","^["]],"^K",["^L",[["^Z"],["^Z","^["]]],"^S",["^L",[null,null]]],"^Q",[["^Z"],["^Z","^["]],"^R",null,"^11",2,"^S",["^L",[null,null]],"^H",1,"^T",false,"~:methods",[["^ ","^11",1,"^T",false,"~:tag","^V"],["^ ","^11",2,"^T",false,"^14","^V"]],"^G",13,"^I",13,"^W",2,"^X",true,"^K",["^L",[["^Z"],["^Z","^["]]],"^O","Create a WebSocket to the specified URL, and returns a 'stream' map of four\n  keys:\n\n    :socket       - contains the WebSocket object\n    :close-status - a promise channel that contains the final close status\n    :source       - a core.async channel to read from\n    :sink         - a core.async channel to write to\n\n  Takes the following options:\n\n    :format      - a formatter from haslett.format\n    :source      - a custom channel to use as the source\n    :sink        - a custom channel to use as the sink\n    :protocols   - passed to the WebSocket, a vector of protocol strings\n    :binary-type - passed to the WebSocket, may be :blob or :arraybuffer\n    :close-chan? - true if channels should be closed if WebSocket is closed\n                   (defaults to true)\n\n  The WebSocket may either be closed directly, or by closing the\n  stream's :sink channel."],"~$connected?",["^ ","^D",null,"^E",["^ ","^F","file:/home/julia/.m2/repository/haslett/haslett/0.1.6/haslett-0.1.6.jar!/haslett/client.cljs","^G",61,"^H",7,"^I",61,"^J",17,"^K",["^L",["^M",["^L",[[["^ ","~:keys",["~$close-status"]]]]]]],"^O","Return true if the stream is currently connected."],"^7","~$haslett.client/connected?","^F","file:/home/julia/.m2/repository/haslett/haslett/0.1.6/haslett-0.1.6.jar!/haslett/client.cljs","^J",17,"^Q",["^L",[["~$p__43304"]]],"^R",null,"^S",["^L",[null,null]],"^H",1,"^T",false,"^G",61,"^U","~$boolean","^I",61,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[[["^ ","^16",["^17"]]]]]]],"^O","Return true if the stream is currently connected."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^4","^4","~$a","^;","^;","^;"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:binary-type","~:format","~:else","~:socket","~:protocols","~:close-chan?","~:recur","~:close-status","~:source","~:reason","~:arraybuffer","~:code","~:sink"]],"~:order",["^1B","^1F","^1C","^1G","^1K","^1@","^1D","^1?","^1I","^1H","^1J","^1E","^1A"]],"^O","A namespace for opening WebSockets in ClojureScript."]